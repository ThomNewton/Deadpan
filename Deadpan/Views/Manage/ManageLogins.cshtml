@*
    This view allows authenticated users to manage their external logins (e.g., Google, Facebook).
    It is strongly typed to the ManageLoginsViewModel, which contains lists of
    the user's current logins and other available login providers.
*@
@model Deadpan.Models.ManageLoginsViewModel
@using Microsoft.Owin.Security
@{
    ViewBag.Title = "Manage your external logins";
}

<main aria-labelledby="title">
    <h2 id="title">@ViewBag.Title.</h2>

    @* Displays a success or error message passed from the controller via the ViewBag. *@
    <p class="text-success">@ViewBag.StatusMessage</p>
    @{
        @* Retrieves all external authentication providers configured for the application. *@
        var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();

        @* If no external providers are configured, display an informational message. *@
        if (loginProviders.Count() == 0)
        {
            <div>
                <p>
                    There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkId=313242">this article</a>
                    for details on setting up this ASP.NET application to support logging in via external services.
                </p>
            </div>
        }
        else
        {
            @* --- CURRENTLY REGISTERED LOGINS --- *@
            @* If the user has one or more external logins linked, display them in a table. *@
            if (Model.CurrentLogins.Count > 0)
            {
                <h4>Registered Logins</h4>
                <table class="table">
                    <tbody>
                        @foreach (var account in Model.CurrentLogins)
                        {
                            <tr>
                                <td>@account.LoginProvider</td>
                                <td>
                                    @*
                                        The "Remove" button is only shown if the user has a local password
                                        OR if they have more than one external login. This prevents users
                                        from locking themselves out of their account.
                                    *@
                                    @if (ViewBag.ShowRemoveButton)
                                    {
                                        @* This form posts to the "RemoveLogin" action to unlink the external account. *@
                                        using (Html.BeginForm("RemoveLogin", "Manage"))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div>
                                                @Html.Hidden("loginProvider", account.LoginProvider)
                                                @Html.Hidden("providerKey", account.ProviderKey)
                                                <input type="submit" class="btn btn-outline-dark" value="Remove" title="Remove this @account.LoginProvider login from your account" />
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        @: &nbsp;
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            @* --- OTHER AVAILABLE LOGINS --- *@
            @* If there are other external login providers available that the user has not yet linked, display them. *@
            if (Model.OtherLogins.Count > 0)
            {
                @* This form posts to the "LinkLogin" action to start the process of linking a new external account. *@
                using (Html.BeginForm("LinkLogin", "Manage"))
                {
                    @Html.AntiForgeryToken()
                    <div id="socialLoginList">
                        <p>
                            @foreach (AuthenticationDescription p in Model.OtherLogins)
                            {
                                <button type="submit" class="btn btn-default" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="Log in using your @p.Caption account">@p.AuthenticationType</button>
                            }
                        </p>
                    </div>
                }
            }
        }
    }
</main>
